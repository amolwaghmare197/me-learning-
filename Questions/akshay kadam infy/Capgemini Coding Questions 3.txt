Q. Remove Duplicate char from string.

import java.util.LinkedHashSet;
import java.util.Set;
import java.util.stream.Collectors;

public class RemoveDuplicates {
    public static void main(String[] args) {
        String input = "apple";

        String result = input.chars()
            .mapToObj(c -> (char) c)
            .collect(Collectors.toCollection(LinkedHashSet::new)) // removes duplicates, keeps order
            .stream()
            .map(String::valueOf)
            .collect(Collectors.joining());

        System.out.println("String after removing duplicates: " + result);
    }
}


============================================================
Q. Remove Duplicate char from list string.

import java.util.*;
import java.util.stream.Collectors;

public class RemoveDuplicatesFromStrings {
    public static void main(String[] args) {
        List<String> inputList = Arrays.asList("apple", "banana", "grape", "mango");

        List<String> resultList = inputList.stream()
            .map(str -> str.chars()
                .mapToObj(c -> (char) c)
                .collect(Collectors.toCollection(LinkedHashSet::new)) // preserves order, removes duplicates
                .stream()
                .map(String::valueOf)
                .collect(Collectors.joining()))
            .collect(Collectors.toList());

        resultList.forEach(System.out::println);
    }
}

======================================================================
Q. removes duplicates string from List.

import java.util.*;
import java.util.stream.Collectors;

public class RemoveDuplicateStrings {
    public static void main(String[] args) {
        List<String> inputList = Arrays.asList("apple", "banana", "apple", "grape", "banana");

        List<String> uniqueList = inputList.stream()
            .distinct()
            .collect(Collectors.toList());

        uniqueList.forEach(System.out::println);
    }
}

======================================================================
Q. how to find first non repetating char in string.

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

public class FirstNonRepeatedChar {

    public static void main(String[] args) {
        String input = "swiss";

        Optional<Character> firstNonRepeated = input.chars()
            .mapToObj(c -> (char) c)
            .collect(Collectors.groupingBy(
                Function.identity(),
                LinkedHashMap::new,
                Collectors.counting()
            ))
            .entrySet()
            .stream()
            .filter(entry -> entry.getValue() == 1)
            .map(Map.Entry::getKey)
            .findFirst();

        if (firstNonRepeated.isPresent()) {
            System.out.println("First non-repeated character: " + firstNonRepeated.get());
        } else {
            System.out.println("No non-repeated character found.");
        }
    }
}
========================================================================
Q. Reverse Each Word in a Sentence
import java.util.Arrays;
import java.util.stream.Collectors;

public class ReverseWords {
    public static void main(String[] args) {
        String sentence = "Java 8 is powerful";
        String result = Arrays.stream(sentence.split(" "))
            .map(word -> new StringBuilder(word).reverse().toString())
            .collect(Collectors.joining(" "));
        System.out.println(result); // avaJ 8 si lufrewop
    }
}

====================================================================

Q. Remove Duplicate Words from a Sentence
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.stream.Collectors;

public class RemoveDuplicateWords {
    public static void main(String[] args) {
        String sentence = "Java is great and Java is powerful";
        String result = Arrays.stream(sentence.split(" "))
            .collect(Collectors.toCollection(LinkedHashSet::new))
            .stream()
            .collect(Collectors.joining(" "));
        System.out.println(result); // Java is great and powerful
    }
}

======================================================================
Q.  Remove Duplicates Ignoring Case

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.LinkedHashSet;

public class RemoveCaseInsensitiveDuplicates {
    public static void main(String[] args) {
        List<String> names = Arrays.asList("Alice", "alice", "Bob", "BOB", "Charlie");

        List<String> uniqueNames = new LinkedHashSet<>(
            names.stream()
                .map(String::toLowerCase)
                .collect(Collectors.toList())
        ).stream().collect(Collectors.toList());

        System.out.println("Unique names (case-insensitive): " + uniqueNames);
    }
}
=======================================================================
Q. find Owels from String using java 8

import java.util.stream.Collectors;

public class FindOwelsFromString {
    public static void main(String[] args) {
        //find owels from string "aeiou";
        String str = "akshayi";
       List<Character> list= str.chars().mapToObj(s-> (char)s).filter(t->"aeiou".indexOf(t)!= -1).collect(Collectors.toList());
       System.out.println(list);
    }

=======================================================================
Q. find 1 to 100 prime no using java 8 

package PracticeQuestion;
import java.util.stream.IntStream;
public class CheckNoIsPrimeOrNot {
    public static void main(String[] args) {
       
        IntStream.rangeClosed(2,100).filter(CheckNoIsPrimeOrNot::isPrime).forEach(System.out::println);
    }
    static boolean isPrime(int no){
        return IntStream.rangeClosed(2,(int)Math.sqrt(no)).allMatch(n-> no%n!=0);
    }
}

=======================================================================

